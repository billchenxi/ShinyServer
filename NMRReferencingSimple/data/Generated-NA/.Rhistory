#     AA = test.new[i,]$AA
#     aa = aaCode[which(aaCode.L == AA)]
#     Aa = aaCode.l[which(aaCode.L == AA)]
# print(name)
# Sigmas = cov.matrix(covariance.cacb, name)
# X = c(test.new[i,]$CA - mu.ca, test.new[i,]$CB - mu.cb)
# Here (X)^T*C*X ~ Chi-square
X = as.matrix(v)
# print(as.matrix(X))
# print(t(X))
chi.str = (t(X)%*% X)/2
chi.str.v = c(chi.str.v, chi.str)
}
chi.str = data.frame(names, chi.str.v)
return(chi.str)
}
# Testing of Chi.str.func
a = c(45,46)
test.chi.str.v2 = chi.str.func2(v=a)
test.chi.str.v2
##################### aa Probability Function 2 #########################
# return 1 value
# input:
# [2] "A-A"
# [1] -603.6171
aa.prob.func2 = function(chi.str, name){
ncp.val = ncp.v2[which(ncp.v2[,1] == name),][,2]
prob = pchisq(chi.str, df=2, ncp = ncp.val)
return(prob)
}
#test aa probability
# test.aa.prob = c()
# for(i in test.chi.str.v2$names){
#   j = test.chi.str.v2[which(test.chi.str.v2$name == i),][,2]
#   test.aa.prob = c(test.aa.prob, aa.prob.func2(j, i))
#   print(i)
#   print(j)
# }
# test.aa.prob
################## AAProb.func ###############
AAProb.func = function(increment){ #(increment)
n.test.new = length(test.new$AA)
sum.aa.prob = rep(0, 19)
for(i in 1:n.test.new){
cs.val = c( test.new[i,][,2]+increment, test.new[i,3]+increment )
#print(cs.val)
chi.strs = chi.str.func2(v=cs.val)# for each
# chi.strs = chi.str.func(v=cs.val) # return 19
# print(chi.strs)
aa.prob=c()
for(j in chi.strs$names){
k = chi.strs[which(chi.strs$name == j),][,2]
aa.prob = c(aa.prob, aa.prob.func2(k, j))
#colnames(aa.prob)=chi.strs$names
}
sum.aa.prob = sum.aa.prob + aa.prob
#AAprobs = data.frame(chi.strs$names, aa.prob)
#print(i) ###
#print(aa.prob) ###
}
probability.of.aa.v = sum.aa.prob/sum(sum.aa.prob))
# print(probability.of.aa.v)
print(probability.of.aa.v - AA.frequence.v)
}
AAProb.func(0)
######################### Loading all the Files and Variables ##################
setwd("~/Documents/Google Drive/NMR_Reference_Correction/RefDB-C/Generated-NA")
fileList = list.files(path = ".", pattern="txt")
fileList.noExt=gsub(".txt", "", fileList)
aaCode = c("A",      "R",  "N",   "D",   "C",   "Q",   "E",   "H",   "I",   "L",   "K",   "M",   "F",   "P",   "S",   "T",   "Y",  "W", "V")
aaCode.L = c("ALA", "ARG", "ASN", "ASP", "CYS", "GLN", "GLU", "HIS", "ILE", "LEU", "LYS", "MET", "PHE", "PRO", "SER", "THR", "TYR","TRP","VAL")
aaCode.l = c("Ala", "Arg", "Asn", "Asp", "Cys", "Gln", "Glu", "His", "Ile", "Leu", "Lys", "Met", "Phe", "Pro", "Ser", "Thr", "Tyr","Trp","Val")
######################### Get the Statistics #############################
RefDB.StatCA <- read.csv("~/Documents/Google Drive/NMR_Reference_Correction/RefDB-C/RefDB.caStat.csv")
RefDB.StatCB <- read.csv("~/Documents/Google Drive/NMR_Reference_Correction/RefDB-C/RefDB.cbStat.csv")
RefDB.StatCB <- RefDB.StatCB[which(RefDB.StatCB$Residue!="Gly"),]
######################### Find the SD and Mean #########################
sd.ca.table = data.frame(RefDB.StatCA$Residue, RefDB.StatCA$Coil.sd, RefDB.StatCA$Helix.sd, RefDB.StatCA$Beta.sd, RefDB.StatCA$Avg.sd)
colnames(sd.ca.table) = c("Residue", "C", "H", "B", "A")
sd.cb.table = data.frame(RefDB.StatCB$Residue, RefDB.StatCB$Coil.sd, RefDB.StatCB$Helix.sd, RefDB.StatCB$Beta.sd, RefDB.StatCB$Avg.sd)
colnames(sd.cb.table) = c("Residue", "C", "H", "B", "A")
mean.ca.table = data.frame(RefDB.StatCA$Residue, RefDB.StatCA$Coil.mu, RefDB.StatCA$Helix.mu, RefDB.StatCA$Beta.mu, RefDB.StatCA$Avg.mu)
colnames(mean.ca.table) = c("Residue", "C", "H", "B", "A")
mean.cb.table = data.frame(RefDB.StatCB$Residue, RefDB.StatCB$Coil.mu, RefDB.StatCB$Helix.mu, RefDB.StatCB$Beta.mu, RefDB.StatCB$Avg.mu)
colnames(mean.cb.table) = c("Residue", "C", "H", "B", "A")
######################### Covarince Function ##########################
ss = c("H", "B", "C", "A")
resonance = c("CA", "CB")
cov.cal = function(){
C = c()
name = c()
ss = c("H", "B", "C", "A")
for(i in aaCode){
for(j in ss){
if(j == "A"){
ss.average = c("H", "B", "C")
Xa = c()
Xb = c()
for(k in ss.average){
filenameCA = paste(i,k,"CA.txt",sep="-")
filenameCB = paste(i,k,"CB.txt",sep="-")
X.a = read.table(filenameCA)
X.b = read.table(filenameCB)
Xa = c(Xa, X.a$V1)
Xb = c(Xb, X.b$V1)
}
}
else{
filenameCA = paste(i,j,"CA.txt",sep="-")
filenameCB = paste(i,j,"CB.txt",sep="-")
Xa = read.table(filenameCA)
Xb = read.table(filenameCB)
}
X = cbind(Xa, Xb)
#print("Chemical shift")
#print(head(X))
c = cov(Xa, Xb, use =  "na.or.complete")
C = c(C, c)
n = paste(i,j,sep = "-")
name = c(name, n)
}
}
return(Carbon.cov = data.frame(name, C))
}
C.ov = cov.cal()
colnames(C.ov) = c("AA.SS", "Value")
covariance.cacb = C.ov
sum(covariance.cacb$Value < 0)
length(covariance.cacb$Value)
#print(covariance.cacb)
cov.matrix = function(covariance, name ){
c.row <- covariance[which(covariance[,1]==name),]
v <- c.row[,2]
index <- which(aaCode==(unlist(strsplit(name, "-"))[1]))
AA.name = aaCode.l[index]
SS.name = unlist(strsplit(name, "-"))[2]
#print(c.row)
#print(v)
#print(AA.name)
#print(SS.name)
sd.ca = sd.ca.table[sd.ca.table$Residue==AA.name,][SS.name]
sd.cb = sd.cb.table[sd.cb.table$Residue==AA.name,][SS.name]
sd.ca.n = as.double(sd.ca)
sd.cb.n = as.double(sd.cb)
#print(sd.ca.n)
#print(sd.cb.n)
covMatrix = matrix(c(sd.ca.n, v, v, sd.cb.n), 2 , 2, byrow = T)
return(covMatrix)
}
cov.matrix(covariance.cacb, "R-H")
########################## The Non-central Parameter w/o Covariance ######################
# no input
non.cen.para.func2 = function(){
cov.v = cov.cal()
para.v = c()
for(i in aaCode){
for(j in ss){
n = paste(i,j, sep="-")
# Sigma = cov.matrix(covariance.cacb, n)
# print(n)
AA.name = aaCode.l[which(aaCode==i)]
mu.ca = mean.ca.table[which(mean.ca.table$Residue == AA.name),][j]
mu.cb = mean.cb.table[which(mean.cb.table$Residue == AA.name),][j]
mu.ca = as.double(mu.ca)
mu.cb = as.double(mu.cb)
X = c(mu.ca, mu.cb)
# print(X)
para = (t(X)%*%X)/2
para.v = c(para.v, para)
}
}
para.mat = data.frame(cov.v$name, para.v)
return(para.mat)
}
ncp.v2 = non.cen.para.func2()
#pchisq(50.5, df = 2, ncp = 1127.48)
#head(ncp.v2)
ncp.v2$para.v > 0
######################### Testing Data ###########################
test = function(){
data <- read.table("~/Documents/Google Drive/NMR_Reference_Correction/RefDB-C/test.txt", quote="\"")
# remove GLY
data.no.gly = data[which(data$V3!="GLY"),]
data.ca <- data.no.gly[which(data.no.gly$V4=="CA"),]
data.cb <- data.no.gly[which(data.no.gly$V4=="CB"),]
common.index = intersect(data.ca$V2, data.cb$V2)
#common.index%in%data.cb$V2
#common.index%in%data.ca$V2
ca.cs = c()
cb.cs = c()
resonance.name = c()
for(i in common.index){
ca.cs = c(ca.cs, data.ca[which(data.ca$V2 == i),]$V6)
cb.cs = c(cb.cs, data.cb[which(data.cb$V2 == i),]$V6)
resonance.name = c(resonance.name, toString(data.ca[which(data.ca$V2 == i),]$V3))
}
error = 0.35
data.f = data.frame(resonance.name, ca.cs+error, cb.cs+error)
colnames(data.f) = c("AA", "CA", "CB")
return(data.f)
}
# Generate the test data
test.new = test()
head(test.new)
######################### Calculate the AA frequency #################
AA.frequence.v = c()
#aaCode.L.noG = aaCode.L[which(a)]
for(i in aaCode.L){
AAfrequence = sum(test.new$AA==i)/length(test.new$AA)
AA.frequence.v = c(AA.frequence.v, AAfrequence)
}
AA.frequence.v
summary(test.new$AA)
length(test.new$AA)
########################### Calculate the Chi.star (Function) w/o Covariance #####################
# only use the average sd and mu
# Data: 5-13
# Input: one observation (one spin)
# Return: vector of 19 values (aa)
#   names  chi.str.v
# 1   A-A  -603.617chi.str.func2 = function(v, ss.value = "A"){
chi.str.func2 = function(v, ss.value = "A"){
# v is the matrix of [x.ca, x.cb]
# ss.value is one sec.str from ss
names = c()
chi.str.v = c()
for(i in aaCode){
name = paste(i,ss.value,sep="-")
names = c(names, name)
#     AA = test.new[i,]$AA
#     aa = aaCode[which(aaCode.L == AA)]
#     Aa = aaCode.l[which(aaCode.L == AA)]
# print(name)
# Sigmas = cov.matrix(covariance.cacb, name)
# X = c(test.new[i,]$CA - mu.ca, test.new[i,]$CB - mu.cb)
# Here (X)^T*C*X ~ Chi-square
X = as.matrix(v)
# print(as.matrix(X))
# print(t(X))
chi.str = (t(X)%*% X)/2
chi.str.v = c(chi.str.v, chi.str)
}
chi.str = data.frame(names, chi.str.v)
return(chi.str)
}
# Testing of Chi.str.func
a = c(45,46)
test.chi.str.v2 = chi.str.func2(v=a)
test.chi.str.v2
##################### aa Probability Function 2 #########################
# return 1 value
# input:
# [2] "A-A"
# [1] -603.6171
aa.prob.func2 = function(chi.str, name){
ncp.val = ncp.v2[which(ncp.v2[,1] == name),][,2]
prob = pchisq(chi.str, df=2, ncp = ncp.val)
return(prob)
}
#test aa probability
# test.aa.prob = c()
# for(i in test.chi.str.v2$names){
#   j = test.chi.str.v2[which(test.chi.str.v2$name == i),][,2]
#   test.aa.prob = c(test.aa.prob, aa.prob.func2(j, i))
#   print(i)
#   print(j)
# }
# test.aa.prob
################## AAProb.func ###############
AAProb.func = function(increment){ #(increment)
n.test.new = length(test.new$AA)
sum.aa.prob = rep(0, 19)
for(i in 1:n.test.new){
cs.val = c( test.new[i,][,2]+increment, test.new[i,3]+increment )
#print(cs.val)
chi.strs = chi.str.func2(v=cs.val)# for each
# chi.strs = chi.str.func(v=cs.val) # return 19
# print(chi.strs)
aa.prob=c()
for(j in chi.strs$names){
k = chi.strs[which(chi.strs$name == j),][,2]
aa.prob = c(aa.prob, aa.prob.func2(k, j))
#colnames(aa.prob)=chi.strs$names
}
sum.aa.prob = sum.aa.prob + aa.prob
#AAprobs = data.frame(chi.strs$names, aa.prob)
#print(i) ###
#print(aa.prob) ###
}
probability.of.aa.v = sum.aa.prob/sum(sum.aa.prob))
# print(probability.of.aa.v)
print(probability.of.aa.v - AA.frequence.v)
}
AAProb.func(0)
AAProb.func = function(increment){ #(increment)
n.test.new = length(test.new$AA)
sum.aa.prob = rep(0, 19)
for(i in 1:n.test.new){
cs.val = c( test.new[i,][,2]+increment, test.new[i,3]+increment )
#print(cs.val)
chi.strs = chi.str.func2(v=cs.val)# for each
# chi.strs = chi.str.func(v=cs.val) # return 19
# print(chi.strs)
aa.prob=c()
for(j in chi.strs$names){
k = chi.strs[which(chi.strs$name == j),][,2]
aa.prob = c(aa.prob, aa.prob.func2(k, j))
#colnames(aa.prob)=chi.strs$names
}
sum.aa.prob = sum.aa.prob + aa.prob
#AAprobs = data.frame(chi.strs$names, aa.prob)
#print(i) ###
#print(aa.prob) ###
}
probability.of.aa.v = sum.aa.prob/sum(sum.aa.prob))
# print(probability.of.aa.v)
print(probability.of.aa.v - AA.frequence.v)
}
n.test.new = length(test.new$AA)
sum.aa.prob = rep(0, 19)
increment = 0
for(i in 1:n.test.new){
cs.val = c( test.new[i,][,2]+increment, test.new[i,3]+increment )
#print(cs.val)
chi.strs = chi.str.func2(v=cs.val)# for each
# chi.strs = chi.str.func(v=cs.val) # return 19
# print(chi.strs)
aa.prob=c()
for(j in chi.strs$names){
k = chi.strs[which(chi.strs$name == j),][,2]
aa.prob = c(aa.prob, aa.prob.func2(k, j))
#colnames(aa.prob)=chi.strs$names
}
print(aa.prob)
or(i in 1:n.test.new){
cs.val = c( test.new[i,][,2]+increment, test.new[i,3]+increment )
#print(cs.val)
chi.strs = chi.str.func2(v=cs.val)# for each
# chi.strs = chi.str.func(v=cs.val) # return 19
# print(chi.strs)
aa.prob=c()
for(j in chi.strs$names){
k = chi.strs[which(chi.strs$name == j),][,2]
aa.prob = c(aa.prob, aa.prob.func2(k, j))
#colnames(aa.prob)=chi.strs$names
}
print(aa.prob)
} #
for(i in 1:n.test.new){
cs.val = c( test.new[i,][,2]+increment, test.new[i,3]+increment )
#print(cs.val)
chi.strs = chi.str.func2(v=cs.val)# for each
# chi.strs = chi.str.func(v=cs.val) # return 19
# print(chi.strs)
aa.prob=c()
for(j in chi.strs$names){
k = chi.strs[which(chi.strs$name == j),][,2]
aa.prob = c(aa.prob, aa.prob.func2(k, j))
#colnames(aa.prob)=chi.strs$names
}
print(aa.prob)
} #
for(i in 1:n.test.new){
cs.val = c( test.new[i,][,2]+increment, test.new[i,3]+increment )
#print(cs.val)
chi.strs = chi.str.func2(v=cs.val)# for each
# chi.strs = chi.str.func(v=cs.val) # return 19
# print(chi.strs)
aa.prob=c()
for(j in chi.strs$names){
k = chi.strs[which(chi.strs$name == j),][,2]
aa.prob = c(aa.prob, aa.prob.func2(k, j))
#colnames(aa.prob)=chi.strs$names
}
# print(aa.prob)
print(i)
sum.aa.prob = sum.aa.prob + aa.prob
#AAprobs = data.frame(chi.strs$names, aa.prob)
#print(i) ###
#print(aa.prob) ###
}
for(i in 1:n.test.new){
cs.val = c( test.new[i,][,2]+increment, test.new[i,3]+increment )
#print(cs.val)
chi.strs = chi.str.func2(v=cs.val)# for each
# chi.strs = chi.str.func(v=cs.val) # return 19
# print(chi.strs)
aa.prob=c()
for(j in chi.strs$names){
k = chi.strs[which(chi.strs$name == j),][,2]
aa.prob = c(aa.prob, aa.prob.func2(k, j))
#colnames(aa.prob)=chi.strs$names
}
# print(aa.prob)
# print(i)
sum.aa.prob = sum.aa.prob + aa.prob
#AAprobs = data.frame(chi.strs$names, aa.prob)
#print(i) ###
#print(aa.prob) ###
}
print(sum.aa.prob)
AAProb.func = function(increment){ #(increment)
n.test.new = length(test.new$AA)
sum.aa.prob = rep(0, 19)
for(i in 1:n.test.new){
cs.val = c( test.new[i,][,2]+increment, test.new[i,3]+increment )
#print(cs.val)
chi.strs = chi.str.func2(v=cs.val)# for each
# chi.strs = chi.str.func(v=cs.val) # return 19
# print(chi.strs)
aa.prob=c()
for(j in chi.strs$names){
k = chi.strs[which(chi.strs$name == j),][,2]
aa.prob = c(aa.prob, aa.prob.func2(k, j))
#colnames(aa.prob)=chi.strs$names
}
# print(aa.prob)
# print(i)
sum.aa.prob = sum.aa.prob + aa.prob
#AAprobs = data.frame(chi.strs$names, aa.prob)
#print(i) ###
#print(aa.prob) ###
}
print(sum.aa.prob)
probability.of.aa.v = sum.aa.prob/sum(sum.aa.prob)
# print(probability.of.aa.v)
print(probability.of.aa.v - AA.frequence.v)
}
AAProb.func(0)
AAProb.func = function(increment){ #(increment)
n.test.new = length(test.new$AA)
sum.aa.prob = rep(0, 19)
for(i in 1:n.test.new){
cs.val = c( test.new[i,][,2]+increment, test.new[i,3]+increment )
#print(cs.val)
chi.strs = chi.str.func2(v=cs.val)# for each
# chi.strs = chi.str.func(v=cs.val) # return 19
# print(chi.strs)
aa.prob=c()
for(j in chi.strs$names){
k = chi.strs[which(chi.strs$name == j),][,2]
aa.prob = c(aa.prob, aa.prob.func2(k, j))
#colnames(aa.prob)=chi.strs$names
}
# print(aa.prob)
# print(i)
sum.aa.prob = sum.aa.prob + aa.prob
#AAprobs = data.frame(chi.strs$names, aa.prob)
#print(i) ###
#print(aa.prob) ###
}
# print(sum.aa.prob)
probability.of.aa.v = sum.aa.prob/sum(sum.aa.prob)
# print(probability.of.aa.v)
diff = (probability.of.aa.v - AA.frequence.v)
abs.diff = abs(diff)
print(abs.diff)
}
AAProb.func(0)
AAProb.func = function(increment){ #(increment)
n.test.new = length(test.new$AA)
sum.aa.prob = rep(0, 19)
for(i in 1:n.test.new){
cs.val = c( test.new[i,][,2]+increment, test.new[i,3]+increment )
#print(cs.val)
chi.strs = chi.str.func2(v=cs.val)# for each
# chi.strs = chi.str.func(v=cs.val) # return 19
# print(chi.strs)
aa.prob=c()
for(j in chi.strs$names){
k = chi.strs[which(chi.strs$name == j),][,2]
aa.prob = c(aa.prob, aa.prob.func2(k, j))
#colnames(aa.prob)=chi.strs$names
}
# print(aa.prob)
# print(i)
sum.aa.prob = sum.aa.prob + aa.prob
#AAprobs = data.frame(chi.strs$names, aa.prob)
#print(i) ###
#print(aa.prob) ###
}
# print(sum.aa.prob)
probability.of.aa.v = sum.aa.prob/sum(sum.aa.prob)
# print(probability.of.aa.v)
diff = (probability.of.aa.v - AA.frequence.v)
abs.diff = abs(diff)
sum.abs.diff = sum(abs.diff)
print(sum.abs.diff)
}
AAProb.func(0)
simulation.test.func = function(){
N = seq(-10, 10, by=0.01)
sum.abs.diff.v = c()
for(i in N){ # i is increment
print(i)
sum.abs.diff.v = c(sum.abs.diff.v, AAProb.func(i))
}
print(sum.abs.diff.v)
return(sum.abs.diff.v)
}
simulation.test.func()
simulation.test.func = function(){
N = seq(0, 0.1, by=0.01)
sum.abs.diff.v = c()
for(i in N){ # i is increment
print(i)
sum.abs.diff.v = c(sum.abs.diff.v, AAProb.func(i))
}
print(sum.abs.diff.v)
return(sum.abs.diff.v)
}
simulation.test.func()
